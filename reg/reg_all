#!/bin/bash

# This command is a command line version of the service registration for bluehorizon.
# This script registers the workload (service) with anax. It also performs the necessary tasks 
# like registering the user and the device on the exchange if needed. 
# The environmental variable file defines all the variables needed to run this script, it must be updated
# before running this command.
# Usage:
#     reg_all -h
#     reg_all -f env_vars_fn  (-f specifies the envionmental variable file name)
#     reg_all   (use the default environmental variable file /var/horizon/reg/env_vars)
#

SCRIPT_DIR="$(dirname "$(readlink -f "$0")")"

# return code
RC_SUCCESS=0
RC_ENV_NOT_DEFINED_OR_BAD=101
RC_FAILED_CREATE_USER_EXCH=102
RC_FAILED_CREATE_DEVICE_EXCH=103
RC_FAILED_DELETE_DEVICE_EXCH=104
RC_FAILED_GET_DEVICE_INFO_ANAX=105
RC_FAILED_CREATE_DEVICE_ANAX=106
RC_FAILED_UPDATE_DEVICE_ANAX=107
RC_FAILED_REG_SERVICE_ATTRIBS_ANAX=108
RC_FAILED_REG_SERVICE_ANAX=109
RC_FAILED_REG_SERVICE_ANAX=110
RC_FAILED_GET_LOCATION=111
RC_USER_MISMATCH=112
RC_BAD_PARAM=113
RC_FAILED_GET_EXCH_URL=114
RC_FAILED_GET_WORKLOAD_CONFIG_ANAX=115
RC_FAILED_POST_WORKLOAD_CONFIG_ANAX=116
RC_FAILED_DELETE_WORKLOAD_CONFIG_ANAX=117
RC_USER_NOT_EXIST=118
RC_DEVICE_NOT_EXIST=119
RC_FAILED_DELETE_AGREEMENT_EXCH=120
RC_FAILED_CHANGE_CONFIG_STATE=121

RC_REREG_NOT_SUPPORT_DEVICE_CHANGE=130
RC_NOT_SUPPORT_DEVICE_CHANGE=131
RC_ANAX_NOT_RUNNING=132


content="-H Content-Type:application/json"
curlBasicArgs="-s -w %{http_code} -H Accept:application/json"

#####
# This function displays the usage for this command
usage()
{
    echo "Usage: reg_all [-f env_vars_fn]

Registers your horizon device, and the services you want it to run. 
This is an alternative to running the horizon registration UI. Ask the system 
administrator to create a user for you in the exchange and then you can use 
the user, password and organization values to fill the env_vars file. And update
the env_vars file with your desired settings before running this command. After 
running this command, the horizon agreement bots will negotiate agreements with
your device to run the services.

Options:
   -f <env_vars_fn>  A file containing the environmental variables that reg_all
                     should use. The default is /var/horizon/reg/env_vars.
                     You must update this file with correct information before 
                     running this command.
    "
}

#####
# This function displays the given message for VERBOSE mode only
debug_message()
{
    # check if the user existes or not
    if [[ $VERBOSE -eq 1 ]]; then
        echo "[D] $@"
    fi
}

#####
# This function displays the given status message.
status_message()
{
    echo "....$@"   
}

#####
# This function displays the given progress message.
prog_message()
{
    if [[ $VERBOSE -eq 1 ]]; then
        echo -e "\n$@"
    else   
        echo -e "$@"
    fi
}

#####
# This function displays the values of some variables
disp_env_vars()
{
    if [[ $VERBOSE -eq 1 ]]; then
        echo -e "\nEnvironmental variables:"
    fi 
    debug_message "USE_SNAP=$USE_SNAP"
    debug_message "EXCH=$EXCH"
    debug_message "ANAX_API=$ANAX_API"
    debug_message "ORGANIZATION=$ORGANIZATION"
    debug_message "USER=$USER, PASSWORD=$PASSWORD, EMAIL=$EMAIL"
    debug_message "DEVICE_ID=$DEVICE_ID, DEVICE_NAME=$DEVICE_NAME, DEVICE_TOKEN=$DEVICE_TOKEN"
    debug_message "MICROSERVICES=$SERVICES"
    debug_message "WORKLOAD_CONFIGS=$WORKLOAD_CONFIGS"
    debug_message "REREG=$REREG"
    debug_message "SERVICES_TO_ADD=$SERVICES_TO_ADD"
    debug_message "SERVICES_TO_DEL=$SERVICES_TO_DEL"
    debug_message "HA_DEVICE=$HA_DEVICE, HA_PARTNERS=$HA_PARTNERS"
    if [[ $VERBOSE -eq 1 ]]; then
        echo ""
    fi 
}

#####
# This function parses the first parameter which is a json structure + a number.
# It matches the number with the second parameter. The function reterns true if
# the two numbers qual, otherwise false.
check_status_code() 
{
    http_ret=$1
    exp_code=$2

    rc=$(echo $http_ret | sed 's/.*}\([0-9]*\)$/\1/')
    debug_message "$rc,$exp_code" 
    if [ $rc -eq $exp_code ]; then
        return 0 # 0 = true
    else
        return 1 # 1 = false
    fi
}

#####
# This function returns parses the input string which is a json + number. 
# It returns the json part.
get_message()
{
    msg=`echo $1 | sed 's/\(.*}\)\([0-9]*\)$/\1/'`
    echo $msg
}

####
# This function checks the credentials given in the env_vars file are valid or not
check_cred()
{
    # ORGANIZATION must be there
    if [[ -z $ORGANIZATION ]]; then
        status_message "Please make sure ORGANIZATION is defined in $ENV_VARS_FILE_NAME file."
        return $RC_ENV_NOT_DEFINED_OR_BAD
    fi

    # USER and PASSWORD are optional. but if they are define, they better be godd
    if [[ -n $USER ]] && [[ -n $PASSWORD ]]; then
        prog_message "Check USER/PASSWORD credential"
        check_user
        rc=$?
        if [ $rc != $RC_SUCCESS ]; then
            status_message "Please either create user $USER in the exchange or update USER, PASSWORD and ORGANIZATION with correct values in $ENV_VARS_FILE_NAME file."
            return $RC_ENV_NOT_DEFINED_OR_BAD
        fi
    else
        prog_message "Check DEVICE_ID/DEVICE_TOKEN credential"
        # if USER and PASSWORD are not define, DEVICE_ID and DEVICE_TOKEN better be good
        if [[ -z $DEVICE_TOKEN ]]; then
            status_message "Please input a valid DEVICE_TOKEN for device $DEVICE_ID in $ENV_VARS_FILE_NAME file."
            return $RC_ENV_NOT_DEFINED_OR_BAD
        else
            check_device_cred
            rc=$?
            if [ $rc != $RC_SUCCESS ]; then
                status_message "Please either create device $DEVICE_ID in the exchange or update DEVICE_ID, DEVICE_TOKEN and ORGANIZATION with correct values in $ENV_VARS_FILE_NAME file."
                return $RC_ENV_NOT_DEFINED_OR_BAD
            fi
        fi
    fi

    status_message "The credential is good"
    return $RC_SUCCESS
}

#####
# This function checks if the user exists or not. 
check_user() {
    ENCODED_AUTH=$( echo -n ${ORGANIZATION}/${USER}:${PASSWORD} | base64 -w 0 )
    debug_message "AUTH=${ORGANIZATION}/${USER}:${PASSWORD} encoded"

    # check if the user existes or not
    debug_message "curl -X POST $curlBasicArgs -H \"Authorization:Basic ${ENCODED_AUTH}\" \"$EXCH/orgs/${ORGANIZATION}/users/${USER}/confirm\""
     ret=$(curl -X POST $curlBasicArgs -H "Authorization:Basic ${ENCODED_AUTH}" "$EXCH/orgs/${ORGANIZATION}/users/${USER}/confirm")
    if check_status_code "$ret" 201; then
        debug_message "The user $USER with password $PASSWORD already exists."
        return $RC_SUCCESS
    else
        debug_message "The user $USER does not exists."
        return $RC_USER_NOT_EXIST
    fi
}


#####
# This function registers the user to to exchange
reg_user() {
    # create the user
    echo "The user $USER does not exist, will create it."
    if [[ -z $EMAIL ]]; then
        status_message "Please make sure EMAIL is defined in $ENV_VARS_FILE_NAME."
        exit $RC_ENV_NOT_DEFINED_OR_BAD
    fi

    ENCODED_AUTH=$( echo -n root/root:${ROOT_PASSWORD} | base64 -w 0 )
    debug_message "AUTH=root/root:${ROOT_PASSWORD} encoded"

    read -d '' user <<EOF
    {  
        "password": "$PASSWORD",
        "email": "$EMAIL"
    }
EOF
    debug_message "echo '$user' | curl $curlBasicArgs -X POST $content -H \"Authorization:Basic ${ENCODED_AUTH}\" --data @- \"$EXCH/orgs/${ORGANIZATION}/users/${USER}\""
    ret=$(echo "$user" | curl $curlBasicArgs -X POST $content -H "Authorization:Basic ${ENCODED_AUTH}" --data @- "$EXCH/orgs/${ORGANIZATION}/users/${USER}")
    if check_status_code "$ret" 201; then
        status_message "User $USER with password $PASSWORD created"
        return $RC_SUCCESS
    else
        status_message "Failed to create user $USER with password $PASSWORD : " $( get_message "$ret" )
        return $RC_FAILED_CREATE_USER_EXCH
    fi
}

#####
# This function checks if the given device id/token are defined in the exchange or not.
check_device_cred() 
{
    ENCODED_AUTH=$( echo -n ${ORGANIZATION}/${DEVICE_ID}:${DEVICE_TOKEN} | base64 -w 0 )
    debug_message "AUTH=${ORGANIZATION}/${DEVICE_ID}:${DEVICE_TOKEN} encoded"

    # check if the device existes or not
    debug_message "curl -X GET $curlBasicArgs -H \"Authorization:Basic ${ENCODED_AUTH}\" \"$EXCH/orgs/${ORGANIZATION}/nodes/${DEVICE_ID}\""
    
    ret=$(curl -X GET $curlBasicArgs -H "Authorization:Basic ${ENCODED_AUTH}" "$EXCH/orgs/${ORGANIZATION}/nodes/${DEVICE_ID}")
    if check_status_code "$ret" 200; then
        debug_message "Device $DEVICE_ID with token $DEVICE_TOKEN already exists in the exchange."
        return $RC_SUCCESS
    else
        debug_message "Device $DEVICE_ID with token $DEVICE_TOKEN does not exist in the exchange. " $( get_message "$ret" )
        return $RC_DEVICE_NOT_EXIST
    fi
}


#####
# This function registers the device to the echange. If the device with the same id exists,
# this function will cleanup the device in the exchange if it is not re-registration.
# By far, check_cred has been called. user cred and the device cred are verified.
# we need to handle the case where user cred is valid, but the device has not been created or
# the device token needs to be updated to the existing device
reg_device_to_exchange() 
{
    # check if we have all the necessary environmental variables defined
    if [[ -z $DEVICE_ID ]]; then
        status_message "Please make sure DEVICE_ID is defined in $ENV_VARS_FILE_NAME."
        return $RC_ENV_NOT_DEFINED_OR_BAD
    fi


    # use user name/password as exchange call credential if they are set.
    # otherwise user device id/token credential.
    user_cred=0 
    if [[ -n $USER ]] && [[ -n $PASSWORD ]]; then
        ENCODED_AUTH=$( echo -n ${ORGANIZATION}/${USER}:${PASSWORD} | base64 -w 0 )
        debug_message "AUTH=${ORGANIZATION}/${USER}:${PASSWORD} encoded"
        user_cred=1
    else
        ENCODED_AUTH=$( echo -n ${ORGANIZATION}/${DEVICE_ID}:${DEVICE_TOKEN} | base64 -w 0 )
        debug_message "AUTH=${ORGANIZATION}/${DEVICE_ID}:${DEVICE_TOKEN} encoded"
    fi         

    # check if the device existes or not
    device_exists=0

    debug_message "curl -X GET $curlBasicArgs -H \"Authorization:Basic ${ENCODED_AUTH}\" \"$EXCH/orgs/${ORGANIZATION}/nodes/${DEVICE_ID}\""
    ret=$(curl -X GET $curlBasicArgs -H "Authorization:Basic ${ENCODED_AUTH}" "$EXCH/orgs/${ORGANIZATION}/nodes/${DEVICE_ID}")
    if check_status_code "$ret" 200; then
        device_exists=1
        status_message "The device $DEVICE_ID already exists on the exchange."

        # verify if the device is owned by the user
        if [[ -n $USER ]]; then
            owner=$(get_message "$ret" | jq ".nodes.\"${ORGANIZATION}/${DEVICE_ID}\".owner")
            owner=$(echo ${owner//\"/}) # remove quotes
            if [[ $owner != "${ORGANIZATION}/${USER}" ]]; then
                # device owner does not match current user
                echo "The device ($DEVICE_ID) owner $owner does not match the current user $USER."
                echo "Please modify the USER variable in the $ENV_VARS_FILE_NAME file and rerun this command."
                echo "Or use a new DEVICE_ID for the device in the $ENV_VARS_FILE_NAME file"

                return $RC_USER_MISMATCH
            fi
        fi
    fi

    # device does not exist
    if [[ $device_exists -eq 0 ]]; then
        if [[ $user_cred -eq 0 ]]; then 
            # if the user credential is not defined, the device credential must point to an existing device
            status_message "  Wrong values for DEVICE_ID, DEVICE_TOKEN or ORGANIZATION are defined in $ENV_VARS_FILE_NAME file."
            return $RC_ENV_NOT_DEFINED_OR_BAD
        fi
    fi

    # create device or update the device
    if [[ $REREG -eq 0 ]]; then 
        prog_message "Create/update device $DEVICE_ID with token $DEVICE_TOKEN on the exchange."
        # create the device
        read -d '' device <<EOF
        {
            "token": "$DEVICE_TOKEN",
            "name": "$DEVICE_NAME",
            "pattern": "",
            "registeredMicroservices": [],
            "msgEndPoint": "",
            "publicKey": "",
            "softwareVersions": {}
        }
EOF
        debug_message "echo '$device' | curl -X PUT $curlBasicArgs $content -H \"Authorization:Basic ${ENCODED_AUTH}\" --data @- \"$EXCH/orgs/${ORGANIZATION}/nodes/${DEVICE_ID}\""
        ret=$(echo "$device" | curl -X PUT $curlBasicArgs $content -H "Authorization:Basic ${ENCODED_AUTH}" --data @- "$EXCH/orgs/${ORGANIZATION}/nodes/${DEVICE_ID}")
        if check_status_code "$ret" 201; then
            status_message "Device created/updated"
            return $RC_SUCCESS
        else
            status_message "Failed to create/update device: " $( get_message "$ret" )
            return $RC_FAILED_CREATE_DEVICE_EXCH
        fi
    fi

    return $RC_SUCCESS
}


#####
# This function calls anax /horizondevice api to save the new device id and token for the user accound. 
reg_device_to_anax()
{
    if [[ $REREG -eq 0 ]]; then
        prog_message "Register device info for $DEVICE_ID, token $DEVICE_TOKEN and organization $ORGANIZATION to anax."
        # check if we have all the necessary environmental variables defined
        if [[ -z $DEVICE_ID ]] || [[ -z $DEVICE_NAME ]] || [[ -z $DEVICE_TOKEN ]]; then
            status_message "Please make sure DEVICE_ID, DEVICE_NAME and DEVICE_TOKEN are defined in $ENV_VARS_FILE_NAME."
            return $RC_ENV_NOT_DEFINED_OR_BAD
        fi 

        # create a new horizondevice account
        read -d '' newhzndevice <<EOF
        {
            "id": "$DEVICE_ID",
            "organization": "$ORGANIZATION",
            "pattern": "$PATTERN",
            "name": "$DEVICE_NAME",
            "token": "$DEVICE_TOKEN",
            "ha_device": $HA_DEVICE
        }
EOF
        debug_message "echo '$newhzndevice' | curl -X POST $curlBasicArgs --data @- \"$ANAX_API/horizondevice\""
        ret=$(echo "$newhzndevice" | curl -X POST $curlBasicArgs --data @- "$ANAX_API/horizondevice")
        if check_status_code "$ret" 201; then
            status_message "Device registered in ananx."
            rc=$RC_SUCCESS
        else
            status_message "Failed to register the device info in anax: " $( get_message "$ret" )
            rc=$RC_FAILED_CREATE_DEVICE_ANAX
        fi
    fi

    return $rc
}


#####
# This function registers a given attribute that is common to all of the micorservices to anax
reg_commom_attribute()
{
    attribute=$1

    atype=$(echo "$attribute" | jq '.type')

    debug_message "echo '$attribute' | curl -X POST $curlBasicArgs --data @- \"$ANAX_API/attribute\""
    ret=$(echo "$attribute" | curl -X POST $curlBasicArgs --data @- "$ANAX_API/attribute")
    if check_status_code "$ret" 201 || check_status_code "$ret" 200; then
        status_message  "$atype common attribute added to anax."
        return $RC_SUCCESS
    else
        status_message "Failed to add $atype common attribute to anax. " $(get_message "$ret")
        return $RC_FAILED_REG_SERVICE_ATTRIBS_ANAX
    fi 
}


#####
# This furncion appends the given service to the given service queue. It will make sure no duplication.
append_service()
{
    svcs=$2
    if [[ -z "$2" ]]; then
        echo "$1"
    else
        if [ "${svcs#*$1}" == "$svcs" ]; then
            echo "$svcs,$1"
        else
            echo "$svcs"
        fi
    fi
}


#####
# This furncion get all the registered services from anax and fill the SERVICES_TO_ADD and SERVICES_TO_DEL variables.
get_all_microservices()
{
    debug_message "Get all registered service attributes:"

    debug_message "curl $curlBasicArgs \"$ANAX_API/attribute\""
    ret=$(curl $curlBasicArgs "$ANAX_API/attribute")

    # exit out if the api call fails
    if ! check_status_code "$ret" 200; then
        status_message "Failed to get all the services. " $(get_message "$ret")
        return $RC_FAILED_GET_SERVICE_ANAX
    fi

    # get all the service names fromt responce.
    all_svcs=""
    resp=$(get_message "$ret" | jq -c '.attributes[].sensor_urls[]')
    for attrib in $resp
    do
        all_svcs=$(append_service $attrib $all_svcs)
    done

    debug_message "all_svcs=$all_svcs"

    # decide what services to add
    needed_svcs=""
    for svc in $(echo $SERVICES | sed "s/,/ /g")
    do
        file_name="$SCRIPT_DIR/microservice/$svc.json"
        if [ ! -f $file_name ]; then
            status_message "Error: File $file_name does not exist."
            continue
        fi

        url=$(cat $file_name | jq '.sensor_url')
        if [ -z $url ]; then
            status_message "Error: File $file_name does not have correct format."
            continue
        fi
        needed_svcs=$(append_service $url $needed_svcs)

        if [ "${all_svcs#*$url}" == "$all_svcs" ]; then
            SERVICES_TO_ADD=$(append_service $svc $SERVICES_TO_ADD)
        fi
    done

    # decide what services to delete
    for current_svc in $(echo $needed_svcs | sed "s/,/ /g")
    do
        if [ "${needed_svcs#*$current_svc}" == "$needed_svcs" ]; then
            SERVICES_TO_DEL=$(append_service $svc $current_svc)
        fi
    done

    return $RC_SUCCESS
}


####
# This function registers the services specified in the SERVICES env variable to anax
# in order to setup the microservices for the device.
reg_microservices()
{
    prog_message "Register microservices"
    # add services
    if [[ -z $SERVICES_TO_ADD ]]; then
        # do nothing if no services to add
        status_message "No new services to be added."
    else
        # register services one by one
        for service in $(echo $SERVICES_TO_ADD | tr "," " "); do
            service_reg=$(envsubst < "$SCRIPT_DIR/microservice/$service.json")

            debug_message "echo '$service_reg' | curl -X POST $curlBasicArgs --data @- \"$ANAX_API/service\""
            ret=$(echo "$service_reg" | curl -X POST $curlBasicArgs --data @- "$ANAX_API/service")

            if check_status_code "$ret" 201; then
                status_message "$service service registered."
            else
                status_message "Failed to register $service services. " $(get_message "$ret")
                return $RC_FAILED_REG_SERVICE_ANAX
            fi
        done
    fi
 
    # delete services
    if [[ -z $SERVICES_TO_DEL ]]; then
        # do nothing if no services to delete
        status_message "No services to be deleted."
    else
        status_message "Services to be deleted are: $SERVICES_TO_DEL. However anax does not support deleting services yet."
    fi

    return $RC_SUCCESS
}


#####
# This furncion deletes all the workload configurations from anax.
delete_all_workload_configs()
{
    prog_message "Delete existing workload configurations from anax."

    debug_message "curl $curlBasicArgs \"$ANAX_API/workloadconfig\""
    ret=$(curl $curlBasicArgs "$ANAX_API/workloadconfig")

    # exit out if the api call fails
    if ! check_status_code "$ret" 200; then
        status_message "Failed to get all the workload configs. " $(get_message "$ret")
        return $RC_FAILED_GET_WORKLOAD_CONFIG_ANAX
    fi

    # get all the service names fromt responce.
    all_wlconf=""
    resp=$(get_message "$ret")
    count=$(echo "$resp" | jq -c '.active | length')


    for ((i=0;i<$count;i++))
    do
        body=$(echo "$resp" | jq -c ".active[$i]")
        name=$(basename $(echo $body | jq -c '.workload_url'))
        debug_message "echo \"$body\"  | curl -X DELETE $curlBasicArgs --data @- \"$ANAX_API/workloadconfig\""
        ret=$(echo "$body" | curl -X DELETE $curlBasicArgs --data @- "$ANAX_API/workloadconfig")

        if check_status_code "$ret" 204; then
            status_message "Workload configuration $name deleted from anax."
        else
            status_message "Failed to delete workload configuration $name from anax. " $(get_message "$ret")
            return $RC_FAILED_DELETE_WORKLOAD_CONFIG_ANAX
        fi

    done

    return $RC_SUCCESS
}


####
# This function posts the workload configurations specified in the WORKLOAD_CONFIGS env variable to anax
# in order to pass the configurations to the workloads.
reg_workload_configs()
{
    prog_message "Set workload configurations to anax."

    # add services
    if [[ -z $WORKLOADS_TO_ADD ]]; then
        # do nothing if no workloads to add
        status_message "No new workload configs to be added."
    else
        # register services one by one
        for workload in $(echo $WORKLOADS_TO_ADD | tr "," " "); do
            wlconf=$(envsubst < "$SCRIPT_DIR/workload/$workload.json")

            debug_message "echo '$wlconf' | curl -X POST $curlBasicArgs --data @- \"$ANAX_API/workloadconfig\""
            ret=$(echo "$wlconf" | curl -X POST $curlBasicArgs --data @- "$ANAX_API/workloadconfig")

            if check_status_code "$ret" 201; then
                status_message "Workload configuration $workload set in anax."
            else
                status_message "Failed to set worload configuration $workload in anax. " $(get_message "$ret")
                return $RC_FAILED_POST_WORKLOAD_CONFIG_ANAX
            fi
        done
    fi

    return $RC_SUCCESS
}


####
# This function sets the LAT and LON env variables when they are not defined
set_latlon()
{
    # do not need this if it is second or more time running the script
    if [[ $REREG -eq 1 ]]; then
        return $RC_SUCCESS
    fi

    prog_message "Set device location in anax. "

    # get lat and lon of the device if not defined
    if [[ -z $LAT ]] || [[ -z $LON ]]; then
        ret=$(curl $curlBasicArgs "http://ip-api.com/json")
        if ! check_status_code "$ret" 200; then
            echo "Failed to get device location. " $(get_message "$ret")
            return $RC_FAILED_GET_LOCATION
        fi
        LAT=$(get_message "$ret" | jq '.lat')
        LON=$(get_message "$ret" | jq '.lon')
    fi

    debug_message "LAT=$LAT, LON=$LON"

    # register location attibutes for all services
    read -d '' locationattribute <<EOF
    {
        "type": "LocationAttributes",
        "label": "Registered Location Facts",
        "publishable": false,
        "host_only": false,
        "mappings": {
            "lat": $LAT,
            "lon": $LON,
            "location_accuracy_km": $LOCATION_ACCURACY_KM,
            "use_gps": $USE_GPS
        }
    }
EOF

    reg_commom_attribute "$locationattribute"
}

####
# This function gets the common attributes from the common.json file
# and register them one by one.
reg_microservice_common_attributes()
{
    # do not need this if it is second or more time running the script
    if [[ $REREG -eq 1 ]]; then
        return $RC_SUCCESS
    fi

    prog_message "Register common service attributes in anax."

    # only do it when the file exists
    fn="$SCRIPT_DIR/common.json"
    if [ -f $fn ]; then
        all_attributes=$(envsubst < $fn)
        len=$(echo "$all_attributes" | jq 'length')

        # check the common attribute one by one, skil the ones that have no data.
        for (( i=0; i < $len; ++i ))
        do
            attribute=$(echo "$all_attributes" | jq "values[$i]")
            if [[ -n $attribute ]]; then
                # get type and remove quotes
                atype=$(echo "$attribute" | jq '.type' | sed "s/\"//g;s/'//g")

                reg=1
                case $atype in
                    "HAAttributes")
                        v=$(echo "$attribute" | jq ".mappings.partnerID")
                        if [ -z "$v" ] || [ "$v" == "[]" ] || [ "$v" == "null" ]; then
                            reg=0
                        fi
                        ;;
                    "MeteringAttributes")
                        v=$(echo "$attribute" | jq ".mappings.tokens")
                        if [ -z "$v" ] || [ "$v" == "0" ] || [ "$v" == "null" ]; then
                            reg=0
                        fi
                        ;;
                    "PropertyAttributes")
                        v=$(echo "$attribute" | jq ".mappings")
                        if [ -z "$v" ] || [ "$v" == "{}" ] || [ "$v" == "null" ]; then
                            reg=0
                        fi
                        ;;
                    "CounterPartyPropertyAttributes")
                        v=$(echo "$attribute" | jq ".mappings.expression")
                        if [ -z "$v" ] || [ "$v" == "{}" ] || [ "$v" == "null" ]; then
                            reg=0
                        fi
                        ;;
                esac

                # register the common attribute
                if [[ $reg -eq 1 ]]; then
                    reg_commom_attribute "$attribute"
                    rc=$?
                    if [ $rc != $RC_SUCCESS ]; then
                        return $rc
                    fi
                else
                    debug_message "Not register $atype common attribute because data is not defined."
                fi
            fi
        done
    else
        debug_message "The file $fn does not exist, this means no need to overwrite the default."
    fi

    return $RC_SUCCESS
}

####
# This function changes the confiration state.
# If the state is changed to configured, then anax will notify the exchange for the registrations.
change_config_state()
{
    state=$1
    prog_message "Change the configuration state to $1."

    case $state in
        "configured")
           ;;
        *)
            echo "anax does not support chaning the confiuration to $state"
            return $RC_FAILED_CHANGE_CONFIG_STATE
            ;;
    esac

    read -d '' newconfigstate <<EOF
    {
       "state": "configured"
    }
EOF
    ret=$(echo "$newconfigstate" | curl -sS -X PUT $curlBasicArgs --data @- "$ANAX_API/horizondevice/configstate")       
    if check_status_code "$ret" 201; then
        status_message "Device configuration state changed to $state."
        rc=$RC_SUCCESS
    else
        status_message "Failed to change the device configuration state to $state in anax: " $( get_message "$ret" )
        rc=$RC_FAILED_CHANGE_CONFIG_STATE
    fi

    return $rc
}

########################################################
# Main program starts here
########################################################

# save all the paremeters for later use
ALL_PARAMES=$@
USE_SNAP=1

# parse the parameters from the command line
while getopts ":f:h" opt; do
    case $opt in
        h)
            usage
            exit 0
            ;;
        f)
            env_vars_fn="$OPTARG"
            ;;
        *)
            echo "Invalid option: -$OPTARG"
            usage
            exit $RC_BAD_PARAM
            ;;
    esac
done

# handle the case like "reg_all fn".
if [[ $OPTIND -eq 1 ]]  && [[ $# -gt 0 ]]; then
    echo "Invalid argument: $@"
    usage
    exit $RC_BAD_PARAM
fi

# set up environmental variables
if [[ -z "$env_vars_fn" ]]; then
    ENV_VARS_FILE_NAME="/var/horizon/reg/env_vars"
else
    ENV_VARS_FILE_NAME=$env_vars_fn
fi

if [[ ! -f $ENV_VARS_FILE_NAME ]]; then 
    echo "The file $ENV_VARS_FILE_NAME does not exist."
    exit $RC_BAD_PARAM
fi

# make sure anax is running
pidof anax > /dev/null
if [[ $? -ne 0 ]]; then
    echo "anax is not running. Please install bluehorizon and horizon pakages or install the bluehorizon snap."
    exit $RC_ANAX_NOT_RUNNING
fi

dpkg -l 2>&1 |grep -q horizon  
if [[ $? -eq 0 ]]; then
    USE_SNAP=0
fi 

# set USER to empty so that it does not take the value from the os
USER=""
source $ENV_VARS_FILE_NAME

# Global variables
ANAX_API="http://localhost:$ANAX_API_PORT"

debug_message "curl $curlBasicArgs \"$ANAX_API/status\""
ret=$(curl $curlBasicArgs "$ANAX_API/status")

if ! check_status_code "$ret" 200; then
    status_message "Failed to get status from anax. " $(get_message "$ret")
fi
EXCH=$(get_message "$ret" | jq '.configuration.exchange_api')

if [ "$EXCH" == "" ]; then
    if [ $USE_SNAP -eq 1 ]; then
        EXCH=$(cat /proc/$(pidof anax)/environ | tr '\0' '\n' | grep CMTN_EXCHANGE_URL |sed 's/CMTN_EXCHANGE_URL=//')
    else
        EXCH=$(cat /etc/default/horizon | grep HZN_EXCHANGE_URL |sed 's/HZN_EXCHANGE_URL=//')
        if [ "$EXCH" == "" ]; then
            EXCH=$(cat /etc/horizon/anax.json |jq '.Edge.ExchangeURL')
        fi
    fi
fi
if [ "$EXCH" == "" ]; then
    echo "Unable to get the exchange url"
    return
fi
EXCH=$(echo ${EXCH//\"/}) # remove quotes
EXCH=${EXCH%/} # remove the last slash if it has one

REREG=0    # not first time to run this script
SERVICES_TO_ADD=""  # services to be added
SERVICES_TO_DEL=""  # services to be deleted


if [[ -z $HA_DEVICE ]]; then
    HA_DEVICE="false"
elif [ $HA_DEVICE == "true" ]; then
    debug_message "Info: Please make sure partnerID is defined in $SCRIPT_DIR/common.json file for the 'ha' attribute because HA_DEVICE is \"true\".
  You can use \"http://<ha_partner_ip>/horizondevice\" on the browser or 
  run \"curl -s http://<ha_partner_ip>/horizendevice | jq '.id'\" to get a ha partner's id."
fi

# get device id and check if this is re-registration
debug_message "curl $curlBasicArgs \"$ANAX_API/horizondevice\""
ret=$(curl $curlBasicArgs "$ANAX_API/horizondevice")
if check_status_code "$ret" 200; then
    t=$(get_message "$ret" | jq '.organization')
    if [[ "$t" != "null" ]]; then 
        REREG=1
    fi
    device=$(get_message "$ret" | jq '.id')
    device=$(echo ${device//\"/}) # remove quotes
    if [[ -z $DEVICE_ID ]]; then
        DEVICE_ID=$device
    elif [[ $REREG -eq 1 ]]; then
        if [[ $DEVICE_ID != $device ]]; then
            echo "Reregistration does not support chaning of device id (old: $device, new: $DEVICE_ID)."
            exit $RC_NOT_SUPPORT_DEVICE_CHANGE
        fi
    fi
else
    if [[ -z $DEVICE_ID ]]; then
        if [ -f "/etc/default/horizon" ]; then
            ret=$(grep CMTN_DEVICE_ID /etc/default/horizon)
            if [ $? -eq 0 ]; then
                DEVICE_ID=$(echo $ret |  sed s'/CMTN_DEVICE_ID=\(.*\)$/\1/')
            fi
        fi
    fi
fi
if [[ -z $DEVICE_ID ]]; then
    echo "Please define DEVICE_ID in $ENV_VARS_FILE_NAME file."
    exit $RC_BAD_PARAM
else
    if [[ -z $DEVICE_NAME ]]; then
        DEVICE_NAME=$DEVICE_ID
    fi
fi

# make sure the device id does not get changed for re-registration
if [ $REREG -eq 1 ]; then
    # for regeg, make sure the device is did not get changed
    if [[ $device != $DEVICE_ID ]]; then
        echo "The new device id $DEVICE_ID does not match the existing device id $device."
        echo "Anax does not support changing device id."
        exit $RC_NOT_SUPPORT_DEVICE_CHANGE
    fi
fi

# check the user defined credentails
check_cred
rc=$?
if [ $rc != $RC_SUCCESS ]; then
    exit $rc
fi

if [[ $REREG -eq 0 ]]; then
    # only create a new token when it is first time.
    if [[ -z $DEVICE_TOKEN ]]; then
        DEVICE_TOKEN=$(date +%s | sha256sum | base64 | head -c 32; echo)
    fi
    SERVICES_TO_ADD=$SERVICES
    SERVICES_TO_DEL=""
fi


# register device on exchange if needed
reg_device_to_exchange
rc=$?
if [ $rc != $RC_SUCCESS ]; then
    exit $rc
fi

# register device to anax
reg_device_to_anax
rc=$?
if [ $rc != $RC_SUCCESS ]; then
    exit $rc
fi

if [[ $REREG -ne 0 ]]; then
    # delete current workload configurations
    delete_all_workload_configs

    # go through all the service attributes and find the existing services
    # and fill the SERVICES_TO_ADD and SERVICES_TO_DEL variables.
    get_all_microservices
fi

WORKLOADS_TO_ADD=$WORKLOAD_CONFIGS

# display env variables for verbose mode
disp_env_vars

# register location attributes for all services
set_latlon
rc=$?
if [ $rc != $RC_SUCCESS ]; then
    exit $rc
fi

# register other common attributes from common.json
reg_microservice_common_attributes
rc=$?
if [ $rc != $RC_SUCCESS ]; then
    exit $rc
fi

# register workload configurations
reg_workload_configs
rc=$?
if [ $rc != $RC_SUCCESS ]; then
    exit $rc
fi

# register services defined in the SERVICES env variable
reg_microservices
rc=$?
if [ $rc != $RC_SUCCESS ]; then
    exit $rc
fi

# commit all the regs
change_config_state configured
rc=$?
if [ $rc != $RC_SUCCESS ]; then
    exit $rc
fi

